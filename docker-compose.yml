version: "3.8"

services:
  # PostgreSQL Database
  pantara-postgres:
    image: postgres:15-alpine
    container_name: pantara-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: pantara
      POSTGRES_USER: pantara_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-pantara_secure_password}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init-scripts:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - pantara-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pantara_user -d pantara"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis untuk caching session dan rate limiting
  pantara-redis:
    image: redis:7-alpine
    container_name: pantara-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_secure_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - pantara-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # pantara Backend Application
  pantara-backend:
    build:
      context: .
      dockerfile: Dockerfile
    image: pantara/backend:${APP_VERSION:-latest}
    container_name: pantara-backend
    restart: unless-stopped
    depends_on:
      pantara-postgres:
        condition: service_healthy
      pantara-redis:
        condition: service_healthy
    environment:
      # Spring Boot Configuration
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-docker}
      SERVER_PORT: 8080

      # Database Configuration
      SPRING_DATASOURCE_URL: jdbc:postgresql://pantara-postgres:5432/pantara
      SPRING_DATASOURCE_USERNAME: pantara_user
      SPRING_DATASOURCE_PASSWORD: ${POSTGRES_PASSWORD:-pantara_secure_password}
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver

      # JPA/Hibernate Configuration
      SPRING_JPA_HIBERNATE_DDL_AUTO: ${JPA_DDL_AUTO:-update}
      SPRING_JPA_SHOW_SQL: ${JPA_SHOW_SQL:-false}
      SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true

      # Connection Pool Configuration
      SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE: ${DB_POOL_MAX_SIZE:-20}
      SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE: ${DB_POOL_MIN_IDLE:-5}
      SPRING_DATASOURCE_HIKARI_CONNECTION_TIMEOUT: 30000
      SPRING_DATASOURCE_HIKARI_IDLE_TIMEOUT: 600000
      SPRING_DATASOURCE_HIKARI_MAX_LIFETIME: 1800000

      # Redis Configuration
      SPRING_DATA_REDIS_HOST: pantara-redis
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_secure_password}
      SPRING_DATA_REDIS_TIMEOUT: 2000ms
      SPRING_DATA_REDIS_LETTUCE_POOL_MAX_ACTIVE: 8
      SPRING_DATA_REDIS_LETTUCE_POOL_MAX_IDLE: 8
      SPRING_DATA_REDIS_LETTUCE_POOL_MIN_IDLE: 0

      # JWT Security Configuration
      JWT_SECRET: ${JWT_SECRET:-pantaraSecureJWTSecretKeyMinimum256BitsForProductionUse2024}
      JWT_EXPIRATION_MS: ${JWT_EXPIRATION_MS:-86400000}

      # Email Configuration
      SPRING_MAIL_HOST: ${MAIL_HOST:-smtp.gmail.com}
      SPRING_MAIL_PORT: ${MAIL_PORT:-587}
      SPRING_MAIL_USERNAME: ${MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${MAIL_PASSWORD}
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true
      SPRING_MAIL_FROM: ${MAIL_FROM:-noreply@pantara.com}

      # OAuth2 Google Configuration
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_ID: ${GOOGLE_CLIENT_ID}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_CLIENT_SECRET: ${GOOGLE_CLIENT_SECRET}
      SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_GOOGLE_SCOPE: email,profile

      # CORS Configuration
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001,http://localhost:4200}
      CORS_ALLOWED_METHODS: ${CORS_ALLOWED_METHODS:-GET,POST,PUT,DELETE,OPTIONS,PATCH,HEAD}
      CORS_ALLOWED_HEADERS: ${CORS_ALLOWED_HEADERS:-*}
      CORS_ALLOW_CREDENTIALS: ${CORS_ALLOW_CREDENTIALS:-true}
      CORS_MAX_AGE: ${CORS_MAX_AGE:-3600}

      # Firebase Configuration
      FIREBASE_CREDENTIALS_PATH: ${FIREBASE_CREDENTIALS_PATH:-firebase-service-account.json}

      # Machine Learning Service Configuration
      ML_SERVICE_URL: ${ML_SERVICE_URL:-http://localhost:5000}
      ML_SERVICE_TIMEOUT: ${ML_SERVICE_TIMEOUT:-10000}

      # Azure ML Configuration (Optional)
      AZURE_ML_ENDPOINT: ${AZURE_ML_ENDPOINT:-}
      AZURE_ML_API_KEY: ${AZURE_ML_API_KEY:-}
      AZURE_ML_TIMEOUT: ${AZURE_ML_TIMEOUT:-10000}

      # Application Configuration
      APP_NAME: ${APP_NAME:-pantara}

      # File Upload Configuration
      SPRING_SERVLET_MULTIPART_MAX_FILE_SIZE: ${MAX_FILE_SIZE:-10MB}
      SPRING_SERVLET_MULTIPART_MAX_REQUEST_SIZE: ${MAX_REQUEST_SIZE:-10MB}

      # Notification Settings
      NOTIFICATION_LOW_STOCK_THRESHOLD: ${LOW_STOCK_THRESHOLD:-5.0}
      NOTIFICATION_EXPIRY_CHECK_HOURS: ${EXPIRY_CHECK_HOURS:-1}
      NOTIFICATION_FRESHNESS_UPDATE_HOURS: ${FRESHNESS_UPDATE_HOURS:-2}

      # Logging Configuration
      LOGGING_LEVEL_COM_EXAMPLE_pantara: ${LOG_LEVEL_APP:-INFO}
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY: ${LOG_LEVEL_SECURITY:-WARN}
      LOGGING_LEVEL_ORG_HIBERNATE: ${LOG_LEVEL_HIBERNATE:-WARN}
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_WEB: ${LOG_LEVEL_WEB:-WARN}

      # Actuator Configuration
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: ${ACTUATOR_ENDPOINTS:-health,info,metrics,prometheus}
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: ${HEALTH_SHOW_DETAILS:-when_authorized}
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-true}

      # JVM Configuration
      JAVA_OPTS: ${JAVA_OPTS:--Xmx1024m -Xms512m -XX:+UseG1GC -XX:MaxGCPauseMillis=200}

      # Timezone
      TZ: ${TIMEZONE:-Asia/Jakarta}

    ports:
      - "${APP_PORT:-8080}:8080"
    volumes:
      # Logs directory
      - ./logs:/app/logs
      # Upload directory untuk file uploads
      - ./uploads:/app/uploads
      # Firebase service account file
      - ./config/firebase-service-account.json:/app/firebase-service-account.json:ro
      # Application properties override (optional)
      - ./config/application-docker.properties:/app/config/application-docker.properties:ro
    networks:
      - pantara-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx sebagai reverse proxy dan load balancer
  pantara-nginx:
    image: nginx:alpine
    container_name: pantara-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_HTTP_PORT:-80}:80"
      - "${NGINX_HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
      - ./static:/var/www/static:ro
    depends_on:
      - pantara-backend
    networks:
      - pantara-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_DIR:-./data}/redis

networks:
  pantara-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: ${DOCKER_SUBNET:-172.20.0.0/16}
          gateway: ${DOCKER_GATEWAY:-172.20.0.1}
